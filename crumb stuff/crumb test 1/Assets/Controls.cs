//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e52d212d-9f21-467e-9823-702e0349f880"",
            ""actions"": [
                {
                    ""name"": ""steer"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b5523a2e-e05b-4988-b3ff-8119511ebec7"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""accel"",
                    ""type"": ""PassThrough"",
                    ""id"": ""73ce58f7-152a-41a8-b7a0-0d2a9b0ad2c4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""brake"",
                    ""type"": ""PassThrough"",
                    ""id"": ""86de9087-a0cf-480e-bbd1-9f9ba6c0c6e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""armmovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""427bba21-6e54-43dd-836f-a246cb709b0a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7814913-9640-40d8-8336-05f2e5f5f924"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""steer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c71e8ea0-6733-447d-9d65-b105c0b7aa68"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""accel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cff75b6b-9773-412f-b899-a8eb7234569a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""brake"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e9913dd-d0cc-4731-8ab8-edb541bf0327"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""armmovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_steer = m_Player.FindAction("steer", throwIfNotFound: true);
        m_Player_accel = m_Player.FindAction("accel", throwIfNotFound: true);
        m_Player_brake = m_Player.FindAction("brake", throwIfNotFound: true);
        m_Player_armmovement = m_Player.FindAction("armmovement", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_steer;
    private readonly InputAction m_Player_accel;
    private readonly InputAction m_Player_brake;
    private readonly InputAction m_Player_armmovement;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @steer => m_Wrapper.m_Player_steer;
        public InputAction @accel => m_Wrapper.m_Player_accel;
        public InputAction @brake => m_Wrapper.m_Player_brake;
        public InputAction @armmovement => m_Wrapper.m_Player_armmovement;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @steer.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSteer;
                @steer.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSteer;
                @steer.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSteer;
                @accel.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAccel;
                @accel.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAccel;
                @accel.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAccel;
                @brake.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrake;
                @brake.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrake;
                @brake.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnBrake;
                @armmovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnArmmovement;
                @armmovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnArmmovement;
                @armmovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnArmmovement;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @steer.started += instance.OnSteer;
                @steer.performed += instance.OnSteer;
                @steer.canceled += instance.OnSteer;
                @accel.started += instance.OnAccel;
                @accel.performed += instance.OnAccel;
                @accel.canceled += instance.OnAccel;
                @brake.started += instance.OnBrake;
                @brake.performed += instance.OnBrake;
                @brake.canceled += instance.OnBrake;
                @armmovement.started += instance.OnArmmovement;
                @armmovement.performed += instance.OnArmmovement;
                @armmovement.canceled += instance.OnArmmovement;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnSteer(InputAction.CallbackContext context);
        void OnAccel(InputAction.CallbackContext context);
        void OnBrake(InputAction.CallbackContext context);
        void OnArmmovement(InputAction.CallbackContext context);
    }
}
